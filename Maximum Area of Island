class Solution {
public:
    int dfs(vector<vector<int>>&grid,vector<vector<bool>> &visited,int i,int j,int row_size,int col_size)
    {
        if(i<0 || j<0 || i>=row_size || j>=col_size)//Not Possible Conditions
        {
            return 0;
        }
        if(grid[i][j]==0 || visited[i][j]==true)//whenever get 0 in grid return 0;
            return 0;
        
        visited[i][j]=true;
        
        int max_area=0;
        
        return  1+dfs(grid,visited,i+1,j,row_size,col_size)+
                  dfs(grid,visited,i-1,j,row_size,col_size)+
                  dfs(grid,visited,i,j+1,row_size,col_size)+
                  dfs(grid,visited,i,j-1,row_size,col_size);              
    }
    int maxAreaOfIsland(vector<vector<int>>& grid)
    {
        int row=grid.size();
        int col=grid[0].size();
        
        vector<vector<bool>> visited(row,vector<bool> (col,false));
        
        int area=0;
        
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                if(grid[i][j]==1 && !visited[i][j])//when grid value is 1 and value is remain unvisited
                {
                    area=max(area,dfs(grid,visited,i,j,row,col));
                }
            }
        }
        return area;
    }
};
