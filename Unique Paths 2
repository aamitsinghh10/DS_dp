class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) 
    {
        int rows=obstacleGrid.size();//rows of grid
        int cols=obstacleGrid[0].size();//cols of grid
        
        int dp[rows][cols];//creating dp table same size as grid
        
        bool flag=false;//this is taken to not visit any element again
        
        for(int i=0;i<cols;i++)//for cols
        {
            if(flag || obstacleGrid[0][i]==1)//when their is an obstacle or the element is already visited
            {
                flag=true;
                dp[0][i]=0;
            }
            else
                dp[0][i]=1;
        }
        flag=false;//again making flag as zero
        
        for(int i=0;i<rows;i++)
        {
           if(flag || obstacleGrid[i][0]==1)//when their is an obstacle
           {
              flag=true;
              dp[i][0]=0;
           }
           else
              dp[i][0]=1;//otherwise mark as 1
        }
        for(int i=1;i<rows;i++)
        {
            for(int j=1;j<cols;j++)
            {
                if(obstacleGrid[i][j]==1)//when their is an obstacle mark that path as zero
                    dp[i][j]=0;
                else
                    dp[i][j]=dp[i-1][j]+dp[i][j-1];//when path exists
            }
        }
        return dp[rows-1][cols-1];
    }
};
