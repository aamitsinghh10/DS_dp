class Solution {
public:
    bool ispalindrome(string &s,int left,int right)
    {
        while(left<right)
        {
            if(s[left]!=s[right])
                return false;
            left++;
            right--;
        }
        return true;
    }
    int MCM(string &s,int left,int right,vector<vector<int>> mem)
    {
        if(left>=right)
            return 0;
        
        if(ispalindrome(s,left,right)==true)
            return 0;
        if(mem[left][right]!=-1)
            return mem[left][right];
        
        int ans=INT_MAX;
        for(int k=left;k<right;k++)
        {
            int temp=MCM(s,left,k,mem)+MCM(s,k+1,right,mem)+1;
            
            ans=min(ans,temp);
        }
        return mem[left][right]=ans;
    }
    int minCut(string s) 
    {
        vector<vector<int>> mem(s.size()+1,vector<int>(s.size()+1,-1));
        
        return MCM(s,0,s.size()-1,mem);
    }
};
// Little Optimization
class Solution {
public:
    bool ispalindrome(string &s,int l,int r)
    {
        while(l<r)
        {
            if(s[l]!=s[r])
                return false;
            l++;
            r--;
        }
        return true;
    }
    int MCM(string &s,int l,int r,vector<vector<int>> mem)
    {
        if(l>=r)
            return 0;
        
        if(ispalindrome(s,l,r)==true)
            return 0;
        if(mem[l][r]!=-1)
            return mem[l][r];
        
        int ans=INT_MAX;
        int left,right;
        
        
        for(int k=l;k<r;k++)
        {
            if(mem[l][k]!=-1)
            {
                left=mem[l][k];
            }
            else
            {
                left=MCM(s,l,k,mem);
                mem[l][k]=left;
            }
            
            
            if(mem[k+1][r]!=-1)
            {
                right=mem[k+1][r];
            }
            else
            {
                right=MCM(s,k+1,r,mem);
                mem[k+1][r]=right;
            }
            int temp=1+left+right;
            
            ans=min(ans,temp);
        }
        return mem[left][right]=ans;
    }
    int minCut(string s) 
    {
        vector<vector<int>> mem(s.size()+1,vector<int>(s.size()+1,-1));
        
        return MCM(s,0,s.size()-1,mem);
    }
};
