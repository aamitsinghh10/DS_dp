class Solution {
public:
    int rob(vector<int>& nums) 
    {
        int n=nums.size();
        
        if(n==0)
            return 0;
        
        vector<int> dp(n,0);
        
        
        //when the house 1(Starting House) is robbed, we are not able to rob the last house as first and last are ajdacent to each other due to in circle
        dp[0]=nums[0];
        
        if(n==1)
            return dp[0];
        
        dp[1]=max(nums[0],nums[1]);
        
        for(int i=2;i<n-1;i++)
        {
            dp[i]=max(nums[i]+dp[i-2],dp[i-1]);
        }
        int amount1=dp[n-2];//ignoring the last house
        
        //when the house 2 is robbed first and we also have to consider the last house as it is not adjacent to starting house 1
        
        dp[0]=0;//ignore the first house
        dp[1]=nums[1];
        
        for(int i=2;i<n;i++)
        {
            dp[i]=max(nums[i]+dp[i-2],dp[i-1]);
        }
        return max(amount1,dp[n-1]);
    }
};
