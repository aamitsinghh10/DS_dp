class Solution {
public:
    int minOperations(vector<int>& nums, int x) 
    {
        int n=nums.size();
        int sum=0;
        
        unordered_map<int,int> mp;
        
        for(int i=0;i<n;i++)//storing prefix sum values in map with indexes
        {
            sum+=nums[i];
            mp[sum]=i;
        }
        int rest=sum-x;
        mp[0]=0;//to handle the edge cases
        int val=0;
        int longest=0;
        
        for(int i=0;i<n;i++)
        {
            val+=nums[i];
            
            if(mp.count(val-rest))
            {
                if((val-rest)==0)
                    longest=max(longest,i-mp[val-rest]+1);
                else
                    longest=max(longest,i-mp[val-rest]);
            }
        }
        if(longest==0)
        {
            if(rest==0)
                return n;
            else
                return -1;
        }
        return n-longest;
    }
};
