class Solution {
public:
    int subsetSum(vector<int> &nums,int n,int sum)
    {
       int dp[n+1][sum+1];
        
       for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                if(i==0)
                    dp[i][j]=0;
                if(j==0)
                    dp[i][j]=1;
            }
        }
        //dp[0][0]=1;
        for(int i=1;i<=n;i++)
        {
            for(int j=0;j<=sum;j++)
            {
                if(nums[i-1]<=j)
                 dp[i][j]=dp[i-1][j-nums[i-1]]+dp[i-1][j];
                else
                  dp[i][j]=dp[i-1][j];
            }
        }
        
        return dp[n][sum];  
}
    int findTargetSumWays(vector<int>& nums, int target) 
    {
        target=abs(target);
        int n=nums.size();
        
         int sum=0;
         
        for(int i=0;i<n;i++)
         sum+=nums[i];
	 
	    int s1=(target+sum)/2;
        
        if(sum<target || (sum+target)%2!=0)
            return 0;
	    
        return subsetSum(nums,n,s1);
    }
};
