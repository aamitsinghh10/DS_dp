class Solution {
public:
    bool isMatch(string s, string p) 
    {
        
        int m=s.size();//string length
        int n=p.size();//pattern length
        
        vector<vector<bool>> dp(n+1,vector<bool> (m+1,false));//creating a dp table
        
        dp[0][0]=true;//when both string and pattern the empty then they match
        
        for(int i=1;i<=m;i++)//all other values at i==0 is false
        {
            dp[0][i]=false;
        }
         for(int i=1;i<=n;i++)// for pattern case 
        {
            if(p[i-1]=='*')// when their is * in row then just fill it according to 2 rows above value
            {
                dp[i][0]=dp[i-2][0];
            }
            else
            {
                dp[i][0]=false;//otherwise mark it as false
            }
        } 
        
        for(int i=1;i<=n;i++)//for all other values of the table
        {
            for(int j=1;j<=m;j++)
            {
                    if(p[i-1]=='*')      //when their is '*' in pattern, if last character of string and previous character before '*' in 
                    pattern doesn't match then simply write according to 2 rows above value. If they match then check 
                    (2 rows above value and 1 left of column, if any of them is true mark true else false), Similar case '.' and '*' together.
                    {
                        dp[i][j]=dp[i-2][j];
                        
                        if(p[i-2]=='.' || p[i-2]==s[j-1])
                            dp[i][j]=dp[i][j] || dp[i][j-1];
                    }
                    else if(p[i-1]==s[j-1])//when last chars match, check them diagonally up
                        dp[i][j]=dp[i-1][j-1];
                    
                    else if(p[i-1]=='.')//when '.' also check them in diagonally up
                        dp[i][j]=dp[i-1][j-1];
                    else
                        dp[i][j]=false;//otherwise false
            }
        }
        return dp[n][m];
    }
};
