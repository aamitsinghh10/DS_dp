class Solution {
public:
    int findLength(vector<int>& nums1, vector<int>& nums2) //Similar as longest common substring
    {
        int m=nums1.size();//size of nums1
        int n=nums2.size();//size of nums2
        
        int dp[m+1][n+1];// Build the dp table to find result
        
        int result=0;// store the maximum length
       
        for(int i=0;i<=m;i++)//whenever any of arrays are zero the result is 0
            dp[i][0]=0;
        
        for(int i=0;i<=n;i++)
            dp[0][i]=0;
        
        for(int i=1;i<=m;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(nums1[i-1]==nums2[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                    result=max(result,dp[i][j]);//resturn max of stored result and current dp[i][j]
                }
                else
                {
                    dp[i][j]=0;//we put zero whenever not matching because we find the subarray which is Continous
                }
            }
        }
        return result;
    }
};
