class Solution {
public:
    bool canPartitionKSubsets(vector<int>& nums, int k) 
    {
        int n=nums.size();
        if(k==1)
            return true;
        
        if(n<k)
            return false;
        
        int sum=0; 
        for(int i=0;i<n;i++)
        {
            sum+=nums[i];
        }
        if(sum%k !=0)//when partition of set is not possible
            return false;
        
        int target=sum/k;
        vector<int> dp((1<<n),-1);
        dp[0]=0;//start index
        
        for(int mask=0;mask<(1<<n);mask++)
        {
            if(dp[mask]==-1)//Invalid Case
                continue;
            
            for(int j=0;j<n;j++)
            {
                if(!(mask & (1<<j)) && dp[mask]+nums[j]<=target)//mask and nums value is less than target than it is included in dp
                {
                    dp[mask | (1<<j)]= (dp[mask]+nums[j])% target;
                }
            }
        }
        return dp[(1<<n)-1]==0? true:false;
    }
};


//Time Complexity: O (N * 2 N) 
Auxiliary Space: O (2 N)
