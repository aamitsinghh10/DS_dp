class Solution {
public:
    unordered_map<string,int> mp;
    
    bool solve(string s1, string s2) 
    {   
        
       int n=s1.length();
        if(n!=s2.length())
            return false;
        
        if(s1.compare(s2)==0)
            return true;
        
        string key=s1+" "+s2;
        
        if(mp.find(key)!=mp.end())
        {
            return mp[key];
        }
        
        bool flag=false;
        
        for(int i=1;i<n;i++)
        {
             bool unswap=solve(s1.substr(0,i),s2.substr(0,i)) && 
                         solve(s1.substr(i,n-i),s2.substr(i,n-i));// when substrings are not swapped
             bool swap=solve(s1.substr(0,i),s2.substr(n-i,i)) && 
                       solve(s1.substr(i),s2.substr(0,n-i));// when substrings are swapped
            
            if(unswap || swap)
            {
                flag=true;
                break;
            }
        }
        mp[key]=flag;
        return flag;
    }
    
    bool isScramble(string s1, string s2) 
    {   
       if(s1.size() != s2.size()) 
           return false;
        
        return solve(s1,s2);
    }
};
